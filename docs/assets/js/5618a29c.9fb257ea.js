"use strict";(self.webpackChunktfaction=self.webpackChunktfaction||[]).push([[132],{28:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"config/tfaction-root-yaml","title":"tfaction-root.yaml","description":"JSON Schema","source":"@site/docs/config/tfaction-root-yaml.md","sourceDirName":"config","slug":"/config/tfaction-root-yaml","permalink":"/tfaction/docs/config/tfaction-root-yaml","draft":false,"unlisted":false,"editUrl":"https://github.com/suzuki-shunsuke/tfaction-docs/edit/main/docs/config/tfaction-root-yaml.md","tags":[],"version":"current","sidebarPosition":200,"frontMatter":{"sidebar_position":200},"sidebar":"tutorialSidebar","previous":{"title":"How to add a working directory","permalink":"/tfaction/docs/config/add-working-directory"},"next":{"title":"tfaction.yaml","permalink":"/tfaction/docs/config/tfaction-yaml"}}');var r=n(4848),a=n(8453);const i={sidebar_position:200},s="tfaction-root.yaml",c={},l=[{value:"JSON Schema",id:"json-schema",level:2},{value:"\ud83d\udca1 Input Complementation by YAML Language Server",id:"-input-complementation-by-yaml-language-server",level:3},{value:"<code>plan_workflow_name</code>",id:"plan_workflow_name",level:2},{value:"<code>target</code> and <code>working_directory</code>",id:"target-and-working_directory",level:2},{value:"<code>target_groups</code>",id:"target_groups",level:2},{value:"Example",id:"example",level:2}];function u(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"tfaction-rootyaml",children:"tfaction-root.yaml"})}),"\n",(0,r.jsx)(t.h2,{id:"json-schema",children:"JSON Schema"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://github.com/suzuki-shunsuke/tfaction/blob/latest/schema/tfaction-root.json",children:"JSON Schema"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://suzuki-shunsuke.github.io/tfaction/config/tfaction-root.html",children:"Generated document from JSON Schema"})}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"-input-complementation-by-yaml-language-server",children:"\ud83d\udca1 Input Complementation by YAML Language Server"}),"\n",(0,r.jsx)(t.p,{children:"Add a code comment to tfaction-root.yaml:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"# yaml-language-server: $schema=https://raw.githubusercontent.com/suzuki-shunsuke/tfaction/refs/heads/latest/schema/tfaction-root.json\n"})}),"\n",(0,r.jsxs)(t.p,{children:["If you specify a branch like ",(0,r.jsx)(t.code,{children:"latest"})," as version, editors can't reflect the update of JSON Schema well as they cache JSON Schema.\nYou would need to do something like reopening the file.\nSo it's good to specify semver and update it periodically."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"# yaml-language-server: $schema=https://raw.githubusercontent.com/suzuki-shunsuke/tfaction/refs/tags/v1.15.5/schema/tfaction-root.json\n"})}),"\n",(0,r.jsx)(t.p,{children:"Using Renovate and our Renovate Config Preset, you can automate the update:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{\n  "extends": [\n    "github>suzuki-shunsuke/renovate-config:yaml-language-server#3.1.0"\n  ]\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"plan_workflow_name",children:(0,r.jsx)(t.code,{children:"plan_workflow_name"})}),"\n",(0,r.jsx)(t.p,{children:"From tfaction v0.7.0, this setting is required."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"plan_workflow_name: <GitHub Actions Workflow name running terraform-plan action>\n"})}),"\n",(0,r.jsx)(t.p,{children:"e.g."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"plan_workflow_name: test\n"})}),"\n",(0,r.jsxs)(t.h2,{id:"target-and-working_directory",children:[(0,r.jsx)(t.code,{children:"target"})," and ",(0,r.jsx)(t.code,{children:"working_directory"})]}),"\n",(0,r.jsxs)(t.p,{children:["tfaction assumes that there are multiple working directories in the repository.\nWorking directory is a directory where terraform commands such as ",(0,r.jsx)(t.code,{children:"terraform init"}),", ",(0,r.jsx)(t.code,{children:"terraform plan"}),", and ",(0,r.jsx)(t.code,{children:"terraform apply"})," are run.\ntfaction treats directories where ",(0,r.jsx)(t.code,{children:"tfaction.yaml"})," is located as working directories.\nWorking directory has an attribute ",(0,r.jsx)(t.code,{children:"target"}),", which is an identifier of the working directory. ",(0,r.jsx)(t.code,{children:"target"})," must be unique.\n",(0,r.jsx)(t.code,{children:"target"})," is used in pull request comments and labels and the input of ",(0,r.jsx)(t.a,{href:"/feature/scaffold-working-dir",children:"scaffold working directory"}),".\nThe attribute ",(0,r.jsx)(t.code,{children:"working_directory"})," of the working directory is a relative file path to the working directory."]}),"\n",(0,r.jsx)(t.h2,{id:"target_groups",children:(0,r.jsx)(t.code,{children:"target_groups"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"target_groups"})," is a list of target group configuration.\ntfaction searches the configuration of the working directory from ",(0,r.jsx)(t.code,{children:"target_groups"}),".\nTarget Group Configuration has attributes ",(0,r.jsx)(t.code,{children:"working_directory"})," and ",(0,r.jsx)(t.code,{children:"target"}),".\nIf the Target Group's ",(0,r.jsx)(t.code,{children:"working_directory"})," is the prefix of the working directory's ",(0,r.jsx)(t.code,{children:"working_directory"}),",\nor the Target Group's ",(0,r.jsx)(t.code,{children:"target"})," is the prefix of the working directory's ",(0,r.jsx)(t.code,{children:"target"}),",\nthe Target Group's configuration is used as the working directory's configuration and the search is stopped."]}),"\n",(0,r.jsxs)(t.p,{children:["The order of ",(0,r.jsx)(t.code,{children:"target_groups"})," is important."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"target_groups:\n- working_directory: aws/\n  target: aws/\n  # ...\n- working_directory: aws/foo/ # This configuration is never used.\n  target: aws/foo/\n  # ...\n"})}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-yaml",children:"---\nplan_workflow_name: test\n\ndraft_pr: true # default is false. If `draft_pr` is true, tfaction creates pull requests as draft\nbase_working_directory: \"\" # default is empty, which means the current directory\nworking_directory_file: tfaction.yaml # default is \"tfaction.yaml\"\n\n# tfaction v1.16.0\n# https://github.com/suzuki-shunsuke/tfaction/pull/2431\nfollow_up_pr_group_label:\n  enabled: true # The default is false\n  prefix: \"tfaction:follow-up-pr-group/\"\n\n# conftest_policy_directory: tfaction >= v1.1.0\n# conftest_policy_directory is the file path to the conftest policy directory.\n# The default value is \"policy\".\n# If conftest_policy_directory isn't set and the directory policy doesn't exist, conftest is skipped.\n# If conftest_policy_directory is set but the directory doesn't exist, the action fails.\nconftest_policy_directory: terraform/policy\n\nrenovate_login: 'renovate[bot]' # default is \"renovate[bot]\"\nlabel_prefixes:\n  target: \"target:\" # default is \"target:\"\n  tfmigrate: \"tfmigrate:\" # default is \"tfmigrate:\"\n  skip: \"skip:\" # default is \"skip:\"\n\naqua:\n  update_checksum:\n    # Update aqua-checksums.json in `setup` action\n    enabled: true # default is false\n    skip_push: false # default is false\n    prune: true # default is false\n\n# tfaction >= v1.3.0\n# https://suzuki-shunsuke.github.io/tfaction/docs/feature/local-path-module\n# https://github.com/suzuki-shunsuke/tfaction/pull/1528\nupdate_local_path_module_caller:\n  enabled: true\n\nenv:\n  # Environment variables\n  # <environment variable name>: <value>\n  FOO: foo\n\n# https://github.com/suzuki-shunsuke/tfaction/pull/1106\n# tfsec:\n#   enabled: true\n# tflint:\n#   enabled: true\n#   fix: true # tfaction >= v1.13.0\n# trivy:\n#   enabled: false\n\n# We don't recommend disabling this feature.\n# update_related_pull_requests:\n#   enabled: false\n\n# tfaction >= v0.5.25\n# https://github.com/suzuki-shunsuke/tfaction/pull/910\n# scaffold_working_directory:\n#   skip_adding_aqua_packages: true\n\n# tfaction >= v0.6.0\ndrift_detection:\n  enabled: false\n  issue_repo_owner: suzuki-shunsuke\n  issue_repo_name: tfaction-example\n  num_of_issues: 1\n  minimum_detection_interval: 1\n\nterraform_command: terraform\n\n# tfaction >= v1.8.0\nconftest:\n  policies:\n    - policy: policy/plan\n      plan: true\n\ntarget_groups:\n- working_directory: aws/\n  target: aws/\n  aws_region: ap-northeast-1\n  s3_bucket_name_tfmigrate_history: '<S3 Bucket Name for tfmigrate history files>'\n  template_dir: templates/aws # This is used by `scaffold-working-dir` action\n  terraform_command: terraform\n  drift_detection:\n    enabled: true\n  terraform_plan_config:\n    aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_AWS_terraform_plan\n\n    # AWS IAM Role Session Name\n    # tfaction >= v1.11.0\n    # This is optional.\n    # The maximum length of the session name is 64.\n    # And it must satisfy regular expression pattern `[\\w+=,.@-]*`.\n    # The default value of session name is\n    # 1. tfaction-{plan or apply}-{normalized target}-${GitHub Actions Run ID}\n    # 2. tfaction-{plan or apply}-{normalized target}\n    # 3. tfaction-{plan or apply}-${GitHub Actions Run ID}\n    # 4. tfaction-{plan or apply}\n    # / in the default targets are converted to `_`.\n    # And if target is too long, it is removed from the default session name.\n    aws_role_session_name: tfplan\n\n  tfmigrate_plan_config:\n    aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_AWS_tfmigrate_plan\n  terraform_apply_config:\n    aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_AWS_terraform_apply\n  tfmigrate_apply_config:\n    aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_AWS_tfmigrate_apply\n\n- working_directory: github/services/\n  target: github/\n  aws_region: ap-northeast-1\n  s3_bucket_name_tfmigrate_history: '<S3 Bucket Name for tfmigrate history files>'\n  template_dir: templates/github\n  aws_secrets_manager:\n  env:\n    # Environment variables\n    FOO: foo\n  # export AWS Secrets Manager's secret as environment variable\n  - secret_id: bar\n    envs:\n    - env_name: BAR\n  terraform_plan_config:\n    aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_github_terraform_plan\n    env:\n      # Environment variables\n      FOO: foo\n  tfmigrate_plan_config:\n    aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_github_tfmigrate_plan\n  terraform_apply_config:\n    aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_github_terraform_apply\n    aws_secrets_manager:\n    # export AWS Secrets Manager's secret as environment variable\n    - secret_id: atlas_api_key\n      envs:\n      - env_name: ATLAS_API_PUBLIC_KEY\n        secret_key: public_key\n      - env_name: ATLAS_API_PRIVATE_KEY\n        secret_key: private_key\n  tfmigrate_apply_config:\n    aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_github_tfmigrate_apply\n\n- working_directory: gcp/\n  target: gcp/\n  aws_region: ap-northeast-1\n  template_dir: templates/github\n\n  # runs_on is GitHub Actions jobs' `runs-on`.\n  # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idruns-on\n  # https://github.com/suzuki-shunsuke/tfaction-example/blob/b8a1740fb881ed8753dba8c76f5df521f1a71dde/.github/workflows/apply.yaml#L29\n  # The default value is \"ubuntu-latest\".\n  # Either a string or an array of strings.\n  # This is useful to use a GitHub Actions Self Hosted Runner for the specific provider\n  runs_on: ubuntu-latest\n  # runs_on: [self-hosted, linux, x64, gpu]\n\n  environment: # default is null\n    # https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment\n    name: production\n    url: https://github.com\n  secrets: # GitHub Secrets\n  - env_name: FOO # Environment variable name\n    secret_name: FOO_STAGING # Secret name\n\n  gcs_bucket_name_tfmigrate_history: '<Google Cloud Storage Bucket Name for tfmigrate history files>'\n\n  # tfaction >= v1.5.0\n  # Google Cloud Service Account for Terraform Backend.\n  # By default, gcp_service_account and gcp_workload_identity_provider are used.\n  gcp_remote_backend_service_account: terraform@my-project.iam.gserviceaccount.com\n  gcp_remote_backend_workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'\n\n  terraform_plan_config:\n    aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_gcp_terraform_plan\n    gcp_service_account: terraform@my-project.iam.gserviceaccount.com\n    gcp_workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'\n\n    # https://github.com/suzuki-shunsuke/tfaction/discussions/1325\n    gcp_access_token_scopes: 'https://www.googleapis.com/auth/cloud-platform, https://www.googleapis.com/auth/userinfo.email, https://www.googleapis.com/auth/apps.groups.settings, https://www.googleapis.com/auth/admin.directory.group'\n  tfmigrate_plan_config:\n    aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_gcp_tfmigrate_plan\n    gcp_service_account: terraform@my-project.iam.gserviceaccount.com\n    gcp_workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'\n\n    # https://github.com/suzuki-shunsuke/tfaction/discussions/1325\n    gcp_access_token_scopes: 'https://www.googleapis.com/auth/cloud-platform, https://www.googleapis.com/auth/userinfo.email, https://www.googleapis.com/auth/apps.groups.settings, https://www.googleapis.com/auth/admin.directory.group'\n  terraform_apply_config:\n    aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_gcp_terraform_apply\n    gcp_service_account: terraform@my-project.iam.gserviceaccount.com\n    gcp_workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'\n\n    # https://github.com/suzuki-shunsuke/tfaction/discussions/1325\n    gcp_access_token_scopes: 'https://www.googleapis.com/auth/cloud-platform, https://www.googleapis.com/auth/userinfo.email, https://www.googleapis.com/auth/apps.groups.settings, https://www.googleapis.com/auth/admin.directory.group'\n  tfmigrate_apply_config:\n    aws_assume_role_arn: arn:aws:iam::000000000000:role/GitHubActions_Terraform_gcp_tfmigrate_apply\n    gcp_service_account: terraform@my-project.iam.gserviceaccount.com\n    gcp_workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'\n\n    # https://github.com/suzuki-shunsuke/tfaction/discussions/1325\n    gcp_access_token_scopes: 'https://www.googleapis.com/auth/cloud-platform, https://www.googleapis.com/auth/userinfo.email, https://www.googleapis.com/auth/apps.groups.settings, https://www.googleapis.com/auth/admin.directory.group'\n"})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var o=n(6540);const r={},a=o.createContext(r);function i(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);