name: setup
description: setup
inputs:
  github_token:
    description: |
      GitHub Access Token
      contents:write - Push commits
      pull-requests:read - Get pull requests
      pull-requests:write - Create pull request comments and labels
      issues:write - Create labels
    required: false
    default: ${{ github.token }}
  ssh_key:
    description: "SSH Key for Terraform Private Module"
    required: false
outputs:
  working_directory:
    description: working directory
    value: ${{ steps.target-config.outputs.working_directory }}
  s3_bucket_name_tfmigrate_history:
    description: S3 Bucket name for tfmigrate history files
    value: ${{ steps.target-config.outputs.s3_bucket_name_tfmigrate_history}}
runs:
  using: composite
  steps:
    - uses: suzuki-shunsuke/tfaction/install@main
      id: install
    - run: github-comment exec -- ci-info run | sed "s/^export //" >> "$GITHUB_ENV"
      shell: bash
      if: |
        ! contains(fromJSON('["workflow_dispatch", "schedule"]'), github.event_name)
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Check if the commit is latest
      shell: bash
      if: github.event_name == 'pull_request' || startsWith(github.event_name, 'pull_request_')
      run: |
        set -euo pipefail

        latest_head_sha=$(jq -r ".head.sha" "$CI_INFO_TEMP_DIR/pr.json")
        if [ "$HEAD_SHA" != "$latest_head_sha" ]; then
          echo "::error::The head sha ($HEAD_SHA) isn't latest ($latest_head_sha)."
          exit 1
        fi
      env:
        HEAD_SHA: ${{github.event.pull_request.head.sha}}

    - uses: suzuki-shunsuke/tfaction/js@main
      id: target-config
      with:
        action: get-target-config

    - run: |
        curl -X POST "https://api.github.com/repos/$GITHUB_REPOSITORY/issues/$CI_INFO_PR_NUMBER/labels" \
          -H "Authorization: token ${GITHUB_TOKEN}" \
          -H "Accept: application/json" \
          -H "Content-type: application/json" \
          -d "[{\"name\":\"${TFACTION_TARGET}\"}]"
      shell: bash
      if: github.event_name == 'pull_request' || startsWith(github.event_name, 'pull_request_')
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - uses: suzuki-shunsuke/tfaction/js@main
      id: global-config
      with:
        action: get-global-config

    - run: echo "$GLOBAL_CONFIG"
      shell: bash
      env:
        GLOBAL_CONFIG: ${{toJSON(steps.global-config.outputs)}}

    - run: echo "$TARGET_CONFIG"
      shell: bash
      env:
        TARGET_CONFIG: ${{toJSON(steps.target-config.outputs)}}

    - uses: aquaproj/update-checksum-action@4963338fe99be2c6fc0ecd972c3b683239e7d85a # v0.2.5
      if: steps.global-config.outputs.aqua_update_checksum_enabled == 'true'
      with:
        skip_push: ${{ steps.global-config.outputs.aqua_update_checksum_skip_push }}
        prune: ${{ steps.global-config.outputs.aqua_update_checksum_prune }}
        working_directory: ${{ steps.target-config.outputs.working_directory }}
      env:
        GITHUB_TOKEN: ${{inputs.github_token}}

    - run: aqua i -l -a
      shell: bash
      working-directory: ${{ steps.target-config.outputs.working_directory }}
      env:
        AQUA_GITHUB_TOKEN: ${{inputs.github_token}}

    - uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
      if: steps.target-config.outputs.aws_assume_role_arn != ''
      with:
        role-to-assume: ${{ steps.target-config.outputs.aws_assume_role_arn }}
        role-session-name: ${{ steps.target-config.outputs.aws_role_session_name }}
        aws-region: ${{ steps.target-config.outputs.aws_region }}

    - uses: suzuki-shunsuke/tfaction/js@main
      with:
        action: export-aws-secrets-manager

    - uses: google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f # v2.1.7
      id: google-backend-credentials
      if: steps.target-config.outputs.gcp_remote_backend_service_account != ''
      with:
        workload_identity_provider: ${{ steps.target-config.outputs.gcp_remote_backend_workload_identity_provider != '' && steps.target-config.outputs.gcp_remote_backend_workload_identity_provider || steps.target-config.outputs.gcp_workload_identity_provider }}
        service_account: ${{ steps.target-config.outputs.gcp_remote_backend_service_account }}

    - shell: bash
      if: steps.target-config.outputs.gcp_remote_backend_service_account != ''
      run: echo "GOOGLE_BACKEND_CREDENTIALS=$GOOGLE_BACKEND_CREDENTIALS" >> "$GITHUB_ENV"
      env:
        GOOGLE_BACKEND_CREDENTIALS: ${{ steps.google-backend-credentials.outputs.credentials_file_path }}

    - uses: google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f # v2.1.7
      if: steps.target-config.outputs.gcp_service_account != ''
      with:
        workload_identity_provider: ${{ steps.target-config.outputs.gcp_workload_identity_provider }}
        service_account: ${{ steps.target-config.outputs.gcp_service_account }}
        access_token_scopes: ${{ steps.target-config.outputs.gcp_access_token_scopes }}
        token_format: ${{ steps.target-config.outputs.gcp_access_token_scopes != '' && 'access_token' || '' }}

    - uses: google-github-actions/setup-gcloud@6189d56e4096ee891640bb02ac264be376592d6a # v2.1.2
      if: steps.target-config.outputs.gcp_service_account != ''

    - uses: suzuki-shunsuke/tfaction/deploy-ssh-key@main
      if: inputs.ssh_key != ''
      with:
        ssh_key: ${{ inputs.ssh_key }}

    - uses: suzuki-shunsuke/github-action-terraform-init@a0f2e069f49737ab11fbd9b00b2149019703ba99 # v1.1.1
      with:
        working_directory: ${{ steps.target-config.outputs.working_directory }}
        github_token: ${{ inputs.github_token }}
        github_app_token: ${{ inputs.github_token }}
        providers_lock_opts: ${{ steps.target-config.outputs.providers_lock_opts }}
        skip_push: ${{ github.event_name != 'pull_request' && ! startsWith(github.event_name, 'pull_request_') }}
        terraform_command: ${{ steps.target-config.outputs.terraform_command }}
